{
  "name": "kurento-client",
  "version": "5.1.0",
  "description": "Media API for the Kurento Web SDK",
  "homepage": "http://www.kurento.org",
  "license": "LGPL",
  "author": {
    "name": "Kurento",
    "email": "info@kurento.com",
    "url": "http://kurento.org"
  },
  "contributors": [
    {
      "name": "Jesús Leganés Combarro 'piranna'",
      "email": "piranna@gmail.com",
      "url": "http://pirannafs.blogspot.com.es"
    }
  ],
  "main": "./lib/index.js",
  "scripts": {
    "prepublish": "scripts/prepublish",
    "test": "scripts/test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Kurento/kurento-client-js"
  },
  "bugs": {
    "email": "kurento@googlegroups.com"
  },
  "keywords": [
    "API",
    "Kurento",
    "WebRTC"
  ],
  "bundleDependencies": [
    "kurento-client-core",
    "kurento-client-elements",
    "kurento-client-filters"
  ],
  "dependencies": {
    "async": "~0.9.0",
    "checktype": "^0.0.5",
    "es6-promise": "2.0.0",
    "extend": "^2.0.0",
    "inherits": "~2.0.1",
    "kurento-client-core": "Kurento/kurento-client-core-js.git#kurento-client-core-5.1.0",
    "kurento-client-elements": "Kurento/kurento-client-elements-js.git#kurento-client-elements-5.1.0",
    "kurento-client-filters": "Kurento/kurento-client-filters-js.git#kurento-client-filters-5.1.0",
    "kurento-jsonrpc": "5.0.4",
    "promisecallback": "0.0.2",
    "reconnect-ws": "KurentoForks/reconnect-ws"
  },
  "devDependencies": {
    "bower": "~1.3.12",
    "grunt": "~0.4.5",
    "grunt-browserify": "^3.1.0",
    "grunt-cli": "~0.1.13",
    "grunt-contrib-clean": "~0.6.0",
    "grunt-contrib-copy": "~0.7.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-jsdoc": "^0.6.1",
    "grunt-npm2bower-sync": "^0.4.0",
    "grunt-shell": "^1.1.1",
    "grunt-githooks": "^0.3.1",
    "grunt-jsbeautifier": "^0.2.7",
    "minifyify": "^4.4.0",
    "npm": "*",
    "qunit-cli": "KurentoForks/qunit-cli",
    "qunit-reporter-junit": "KurentoForks/qunit-reporter-junit",
    "qunitjs": "~1.15.0",
    "wock": "^0.1.1"
  },
  "readme": "[![][KurentoImage]][website]\n\nCopyright © 2014 Kurento. Licensed under [LGPL License].\n\nJavaScript Kurento Client\n=========================\n\nThe project contains the implementation of the JavaScript Kurento Client\nfor web applications and Node.js.\n\nThe source code of this project can be cloned from the [GitHub repository].\n\nInstallation instructions\n-------------------------\n\nThese instructions are intended for code contributors or people willing to\ncompile the browser version themselves. If you are a browser-only developer,\nit's better that you have a look at the [JavaScript Kurento Client for Bower]\ninstructions.\n\n### Node.js\n\nBe sure to have installed [Node.js] in your system:\n\n```bash\ncurl -sL https://deb.nodesource.com/setup | sudo bash -\nsudo apt-get install -y nodejs\n```\n\nTo install the library, it's recommended to do that from the [NPM repository] :\n\n```bash\nnpm install kurento-client\n```\n\nAlternatively, or if you want to modify the JavaScript Kurento Client code or\ngenerate yourself the browser version of the library, you can download the\ndevelopment code files using git and install manually its dependencies:\n\n```bash\ngit clone https://github.com/Kurento/kurento-client-js\ncd kurento-client-js\nnpm install\n```\n\nIn this last case, you will also need to have installed [Kurento Module Creator]\nso you can be able to generate the client libraries code.\n\n### Browser\n\nTo build the browser version of the library, after downloading the development\ncode files, you'll only need to exec the [grunt] task runner from the root of\nthe project and they will be generated on the ```dist``` folder. Alternatively,\nif you don't have it globally installed, you can run a local copy by executing\n\n```bash\nnode_modules/.bin/grunt\n```\n\n\nHow to test\n-----------\nTests are autonomous and based on [QUnit] testing framework. Their only\nrequirement is to exec previously ```npm install``` to have installed all the\ndev dependencies.\n\n### Browser\n\nAfter building the web browser version of the library, just open the file\n```test/index.html``` with any browser, and the tests will launch automatically.\nIn case of the browser raise some security policy errors, you can host the tests\ncode by running any static web server at the source code root folder, for\nexample by launching the command\n\n```bash\npython -m SimpleHTTPServer 8000\n```\n\nYou can be able to configure to what WebSocket endpoint you want to connect on\nthe dropdown list at the top of the tests page.\n\n### Node.js\n\nTo exec test in Node.js, you only need to exec ```npm test```, that will launch\nall the tests automatically using [QUnit-cli].\n\nAt this moment, the default WebSocket endpoint can not be changed due to limits\nof the current implementation of NPM. If you need to use a different WebSocket\nendpoint from the default one, you can exec the underlying test command and\nappend a *ws_uri* parameter pointing to the alternative WebSocket endpoint:\n\n```bash\nnode_modules/.bin/qunit-cli -c kurentoClient:. -c wock:node_modules/wock -c test/_common.js -c test/_proxy.js test/*.js --ws_uri=ws://localhost:8080\n```\n\n\nHow to create a basic pipeline\n------------------------------\n\nFor tutorial purposes, we are going to create a basic pipeline that play a video\nfile from its URL and stream it over HTTP :\n\n1. Create an instance of the KurentoClient class that will manage the connection\n   with the Kurento Media Server, so you'll need to provide the URI of its\n   WebSocket endpoint. Alternatively, instead of using a constructor, you can\n   also provide success and error callbacks:\n\n   ```Javascript\n   var kurento = kurentoClient.KurentoClient(ws_uri);\n\n   kurento.then(function(kurento)\n   {\n     // Connection success\n     …\n   },\n   function(error)\n   {\n     // Connection error\n     …\n   });\n   ```\n\n   ```Javascript\n   kurentoClient.KurentoClient(ws_uri, function(kurento)\n   {\n     // Connection success\n     …\n   },\n   function(error)\n   {\n     // Connection error\n     …\n   });\n   ```\n\n2. Create a pipeline. This will host and connect the diferent elements. In case\n   of error, it will be notified on the ```error``` parameter of the callback,\n   otherwise this will be null as it's common on Node.js style APIs:\n\n   ```Javascript\n   kurento.create('MediaPipeline', function(error, pipeline)\n   {\n     …\n   });\n   ```\n\n3. Create the elements. The player need an object with the URL of the video, and\n   we'll also subscribe to the 'EndOfStream' event of the HTTP stream:\n\n   ```Javascript\n   pipeline.create('PlayerEndpoint',\n   {uri: \"https://ci.kurento.com/video/small.webm\"},\n   function(error, player)\n   {\n     …\n   });\n\n   pipeline.create('HttpGetEndpoint', function(error, httpGet)\n   {\n     httpGet.on('EndOfStream', function(event)\n     {\n       …\n     });\n\n     …\n   });\n   ```\n\n4. Connect the elements, so the media stream can flow between them:\n\n   ```Javascript\n   player.connect(httpGet, function(error, pipeline)\n   {\n     …\n   });\n   ```\n\n5. Get the URL where the media stream will be available:\n\n   ```Javascript\n   httpGet.getUrl(function(error, url)\n   {\n     …\n   });\n   ```\n\n6. Start the reproduction of the media:\n\n   ```Javascript\n   player.play(function(error)\n   {\n     …\n   });\n   ```\n\n\nKurento\n=======\n\nWhat is Kurento\n---------------\nKurento provides an open platform for video processing and streaming based on\nstandards.\n\nThis platform has several APIs and components which provide solutions to the\nrequirements of multimedia content application developers. These include:\n\n  * Kurento Media Server (KMS). A full featured media server providing\n    the capability to create and manage dynamic multimedia pipelines.\n  * Kurento Clients. Libraries to create applications with media\n    capabilities. Kurento provides libraries for Java, browser JavaScript,\n    and Node.js.\n\nDownloads\n---------\nTo download binary releases of Kurento components visit http://kurento.org\n\nCode for other Kurento projects can be found in the [GitHub Kurento group].\n\nNews and Website\n----------------\nInformation about Kurento can be found on our [website].\nFollow us on Twitter @[kurentoms].\n\n[GitHub Kurento group]: https://github.com/kurento\n[GitHub repository]: https://github.com/kurento/kurento-client-js\n[grunt]: http://gruntjs.com/\n[Kurento Module Creator]: https://github.com/Kurento/kurento-module-creator\n[KurentoImage]: https://secure.gravatar.com/avatar/21a2a12c56b2a91c8918d5779f1778bf?s=120\n[kurentoms]: http://twitter.com/kurentoms\n[JavaScript Kurento Client for Bower]: https://github.com/Kurento/kurento-client-bower\n[LGPL License]: http://www.gnu.org/licenses/lgpl-2.1.html\n[Node.js]: http://nodejs.org/\n[NPM repository]: https://www.npmjs.org/package/kurento-client\n[QUnit]: http://qunitjs.com\n[QUnit-cli]: https://github.com/devongovett/qunit-cli\n[website]: http://kurento.org\n",
  "readmeFilename": "README.md",
  "_id": "kurento-client@5.1.0",
  "dist": {
    "shasum": "30ffcc172221a7bae8965478829bd25767aa5e6e"
  },
  "_from": "kurento-client@5.1.0",
  "_resolved": "https://registry.npmjs.org/kurento-client/-/kurento-client-5.1.0.tgz"
}
